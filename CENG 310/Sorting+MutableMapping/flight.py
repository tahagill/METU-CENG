# -*- coding: utf-8 -*-
"""DSA_PA3_CENG310

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18iQoEPFH9qBUAW6cqZssdkZn8zzc1GKO
"""

from collections.abc import MutableMapping
from random import randrange


class MapBase(MutableMapping):
    class _Item:
        __slots__ = '_key', '_value'

        def __init__(self, key, value):
            self._key = key
            self._value = value

        def __eq__(self, other):
            return self._key == other._key

        def __ne__(self, other):
            return not self == other

        def __lt__(self, other):
            return self._key < other._key


class SortedTableMap(MapBase):
    """
    Map implementation using a sorted table.
    """

    # nonpublic behaviors
    def _find_index(self, k, low, high):
        """
        Return index of the leftmost item with key greater than or equal to k.
        Return high + 1 if no such item qualifies.
        That is, j will be returned such that:
            all items of slice table[low:j] have key < k
            all items of slice table[j:high+1] have key >= k
        """
        if high < low:
            # no element qualifies
            return high + 1
        else:
            mid = (low + high) // 2
            if k == self._table[mid]._key:
                # found exact match
                return mid
            elif k < self._table[mid]._key:
                # note: may return mid
                return self._find_index(k, low, mid - 1)
            else:
                # answer is right of mid
                return self._find_index(k, mid + 1, high)

    # public behaviors
    def __init__(self):
        """
        Create an empty map.
        """
        self._table = []

    def __len__(self):
        """
        Return number of items in the map.
        """
        return len(self._table)

    def __getitem__(self, k):
        """
        Return value associated with key k (raise KeyError if not found).
        """
        j = self._find_index(k, 0, len(self._table) - 1)
        if j == len(self._table) or self._table[j]._key != k:
            raise KeyError('Key Error:' + repr(k))
        return self._table[j]._value

    def __setitem__(self, k, v):
        """
        Assign value v to key k, overwriting existing value if present.
        """
        j = self._find_index(k, 0, len(self._table) - 1)
        if j < len(self._table) and self._table[j]._key == k:
            # reassign value
            self._table[j]._value = v
        else:
            # adds new item
            self._table.insert(j, self._Item(k, v))

    def __delitem__(self, k):
        """
        Remove item associated with key k (raise KeyError if not found).
        """
        j = self._find_index(k, 0, len(self._table) - 1)
        if j == len(self._table) or self._table[j]._key != k:
            raise KeyError('Key Error: ' + repr(k))
        # delete item
        self._table.pop(j)

    def __iter__(self):
        """
        Generate keys of the map ordered from minimum to maximum.
        """
        for item in self._table:
            yield item._key

    def __reversed__(self):
        """
        Generate keys of the map ordered from maximum to minimum.
        """
        for item in reversed(self._table):
            yield item._key

    def find_min(self):
        """
        Return (key, value) pair with minimum key (or None if empty).
        """
        if len(self._table) > 0:
            return (self._table[0]._key, self._table[0]._value)
        else:
            return None

    def find_max(self):
        """
        Return (key, value) pair with maximum key (or None if empty).
        """
        if len(self._table) > 0:
            return (self._table[-1]._key, self._table[-1]._value)
        else:
            return None

    def find_ge(self, k):
        """
        Return (key, value) pair with least key greater than or equal to k.
        """
        # j's key >= k
        j = self._find_index(k, 0, len(self._table) - 1)
        if j < len(self._table):
            return (self._table[j]._key, self._table[j]._value)
        else:
            return None

    def find_lt(self, k):
        """
        Return (key, value) pair with greatest key strictly less than k.
        """
        # j's key >= k
        j = self._find_index(k, 0, len(self._table) - 1)
        if j > 0:
            # note use of j-1
            return (self._table[j - 1]._key, self._table[j - 1]._value)
        else:
            return None

    def find_gt(self, k):
        """
        Return (key, value) pair with least key strictly greater than k.
        """
        # j's key >= k
        j = self._find_index(k, 0, len(self._table) - 1)
        if j < len(self._table) and self._table[j]._key == k:
            # advanced past match
            j += 1
        if j < len(self._table):
            return (self._table[j]._key, self._table[j]._value)
        else:
            return None

    def find_range(self, start, stop):
        """
        Iterate all (key, value) pairs such that start <= key <= stop.
        If start is None, iteration begins with minimum key of map.
        If stop is None, iteration continues through the maximum key of map.
        """
        if start is None:
            j = 0
        else:
            # find first result
            j = self._find_index(start, 0, len(self._table) - 1)
        while j < len(self._table) and (stop is None or self._table[j]._key < stop):
            yield (self._table[j]._key, self._table[j]._value)
            j += 1


from datetime import datetime
from datetime import timedelta

class Flight:
    def __init__(self, route, date, time, seats_first, seats_coach, duration, fare):
        self.route = route
        self.date = parse_date(date)
        self.time = datetime.strptime(time, '%H:%M').time()
        self.seats_first = int(seats_first)
        self.seats_coach = int(seats_coach)
        self.duration = self.parse_duration(duration)
        self.fare = float(fare)

    def __lt__(self, other):
        return (
            self.route,
            self.date,
            self.time) < (
            other.route,
            other.date,
            other.time
        )

    def parse_duration(self, duration_str):
        hours, minutes, seconds = map(int, duration_str.split(':'))
        return timedelta(hours=hours, minutes=minutes, seconds=seconds)

    def check_seat_availability(self, class_type):
        if class_type == 'first':
            return self.seats_first
        elif class_type == 'coach':
            return self.seats_coach
        else:
            raise ValueError("Invalid class type")

    def book_seat(self, class_type):
        if class_type == 'first' and self.seats_first > 0:
            self.seats_first -= 1
            return True
        elif class_type == 'coach' and self.seats_coach > 0:
            self.seats_coach -= 1
            return True
        else:
            return False

    def cancel_booking(self, class_type):
        if class_type == 'first':
            self.seats_first += 1
            return True
        elif class_type == 'coach':
            self.seats_coach += 1
            return True
        else:
            return False

    def calculate_flight_duration(self):
        return self.duration

class FlightDatabase:
    def __init__(self):
        self._flights = SortedTableMap()

    def add_flight(self, flight):
        key = (
            flight.route,
            flight.date,
            flight.time
        )
        self._flights[key] = flight

    def find_flights(self, route, date, time_start, time_end):
        start_key = (
            route,
            datetime.strptime(date, '%d%b'),
            datetime.strptime(time_start, '%H:%M').time()
        )
        end_key = (
            route,
            datetime.strptime(date, '%d%b'),
            datetime.strptime(time_end, '%H:%M').time()
        )
        return [self._flights[key] for key in self._flights.find_range(start_key, end_key)]

    def display_all_flights(self):
        for flight in self._flights.values():
            print(
                f"{flight.route} on {flight.date.strftime('%d%b')} at {flight.time.strftime('%H:%M')}"
            )

    def check_seat_availability(self, route, date, time, class_type):
        key = (
            route,
            datetime.strptime(date, '%d%b'),
            datetime.strptime(time, '%H:%M').time()
        )
        if key in self._flights:
            flight = self._flights[key]
            return flight.check_seat_availability(class_type)
        else:
            return "Flight not found"

    def book_seat(self, route, date, time, class_type):
        key = (
            route,
            datetime.strptime(date, '%d%b'),
            datetime.strptime(time, '%H:%M').time()
        )
        if key in self._flights:
            flight = self._flights[key]
            return flight.book_seat(class_type)
        return False  # Flight not found

    def cancel_booking(self, route, date, time, class_type):
        key = (
            route,
            datetime.strptime(date, '%d%b'),
            datetime.strptime(time, '%H:%M').time()
        )
        if key in self._flights:
            flight = self._flights[key]
            return flight.cancel_booking(class_type)
        return False  # Flight not found

    def calculate_flight_duration(self, route, date, time):
        key = (
            route,
            datetime.strptime(date, '%d%b'),
            datetime.strptime(time, '%H:%M').time()
        )
        if key in self._flights:
            flight = self._flights[key]
            return flight.calculate_flight_duration()
        return None  # Flight not found

    def find_flight_by_number(self, route, date, time, flight_number):
        key = (
            route,
            datetime.strptime(date, '%d%b'),
            datetime.strptime(time, '%H:%M').time()
        )
        if key in self._flights:
            flight = self._flights[key]
            if flight.route == route and flight.flight_number == flight_number:
                return flight
        return None  # Flight not found

    def read_flights_from_file(self, filename):
        with open(filename, 'r') as file:
            for line in file:
                route, date, time, seats_first, seats_coach, duration, fare = line.strip().split(',')
                flight = Flight(route, date, time, seats_first, seats_coach, duration, fare)
                self.add_flight(flight)

    def parse_date(self, date_str):
        try:
            return datetime.strptime(date_str, '%d-%b')
        except ValueError:
            return datetime.strptime(date_str, '%d%b')


# Create a FlightDatabase instance
flight_db = FlightDatabase()

# Add flights to the database
flight_db.add_flight(Flight("ATL to MIA", "08May", "08:00", 25, 250, "2:15:00", 300.0))
flight_db.add_flight(Flight("JFK to LAX", "06May", "12:00", 20, 200, "5:30:00", 400.0))
flight_db.add_flight(Flight("LAX to SFO", "09May", "14:45", 12, 120, "1:30:00", 180.0))
flight_db.add_flight(Flight("ORD to PVD", "05May", "09:30", 10, 100, "2:30:00", 200.0))
flight_db.add_flight(Flight("ORD to PVD", "05May", "15:00", 5, 50, "2:30:00", 180.0))
flight_db.add_flight(Flight("SFO to LAS", "07May", "10:30", 15, 150, "1:45:00", 150.0))

# Display all flights in the database
print("All Flights in the Database:")
flight_db.display_all_flights()

# Example usage of additional methods
print("\nChecking seat availability for LAX on 09May at 14:45 (First Class):")
print(f"Available seats: {flight_db.check_seat_availability('LAX to SFO', '09May', '14:45', 'first')}")

print("\nBooking a seat for LAX on 09May at 14:45 (Coach Class):")
if flight_db.book_seat('LAX to SFO', '09May', '14:45', 'coach'):
    print("Booking successful.")
else:
    print("Booking failed. No available seats.")

print("\nCancelling a booking for LAX on 09May at 14:45 (First Class):")
if flight_db.cancel_booking('LAX to SFO', '09May', '14:45', 'first'):
    print("Cancellation successful.")
else:
    print("Cancellation failed. No booking found.")

print("\nCalculating flight duration for LAX on 09May at 14:45:")
duration = flight_db.calculate_flight_duration('LAX to SFO', '09May', '14:45')
if duration:
    print(f"Flight duration: {duration}")
else:
    print("Flight not found")